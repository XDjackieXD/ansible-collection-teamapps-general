# Read logs from Docker API and Send to loki sink

[sources.docker-local]
  type = "docker_logs"
  docker_host = "/var/run/docker.sock"
  exclude_containers = []

  # Identify zero-width space as first line of a multiline block.
  multiline.condition_pattern = '^\x{200B}' # required
  multiline.mode = "halt_before" # required
  multiline.start_pattern = '^\x{200B}' # required
  multiline.timeout_ms = 1000 # required, milliseconds

[transforms.docker-local_with_defaults]
  inputs = ["docker-local"]
  type   = "remap"
  source = '''
      # workaround for missing fallback option.
      if exists(.label."com.docker.compose.container-number") {
        .compose_container_number = .label."com.docker.compose.container-number"
      } else {
        .compose_container_number = "999"
      }
      if exists(.label."com.docker.compose.project") {
        .compose_project = .label."com.docker.compose.project"
      } else {
        .compose_project = ""
      }
      if exists(.label."com.docker.compose.project.working_dir") {
        .compose_project_working_dir = .label."com.docker.compose.project.working_dir"
      } else {
        .compose_project_working_dir = ""
      }
      if exists(.label."com.docker.compose.oneoff") {
        .compose_oneoff = .label."com.docker.compose.oneoff"
      } else {
        .compose_oneoff = ""
      }
      if exists(.label."com.docker.compose.service") {
        .compose_service = .label."com.docker.compose.service"
      } else {
        .compose_service = ""
      }
  '''

[sinks.loki]
  # General
  type = "loki" # required
  inputs = ["docker-local_with_defaults"] # required
  endpoint = "{{ vector_loki_endpoint }}" # required


  # Auth
  auth.strategy = "basic" # required
  auth.user = "{{ vector_loki_username }}" # required
  auth.password = "{{ vector_loki_password }}" # required

  # Encoding
  # encoding.codec = "json" # Content = all info as json structure
  encoding.codec = "text"   # Content = only the actual log line, message field from the event.

  # Healthcheck
  healthcheck.enabled = false # optional, default true

  buffer.max_events = {{  vector_loki_buffer_max_events }} # default: 500

  batch.max_bytes = {{ vector_loki_batch_max_bytes }} # default 102400 (0.1mb)
  batch.max_events = {{ vector_loki_batch_max_events }}
  batch.timeout_secs =  {{ vector_loki_batch_timeout_secs }} # default 1
  request.retry_max_duration_secs = {{ vector_loki_request_retry_max_duration_secs }} # default 3600, 1h

  compression = "gzip" # default none, promtail uses snappy (not available in vector)

  out_of_order_action = "accept"

  # Labels

  labels.instance = '{{ ansible_fqdn }}'
{% raw %}
  labels.forwarder = 'vector'
  labels.category = 'dockerlogs'
  labels.host = '{{ host }}'
  labels.source_type =  '{{ source_type }}'

  labels.source = '{{ stream }}'
  labels.stream = '{{ stream }}'

  labels.container_created_at = '{{ container_created_at }}'
  labels.container_id = '{{ container_id }}'
  labels.container_name = '{{ container_name }}'
  labels.container_image = '{{ image }}'

  ## add all labels as json, see ansible vector role Readme.
  labels.container_labels = '{{ label }}'

  ## add labels useful for log filtering
  labels.compose_container_number = '{{ compose_container_number }}'
  labels.compose_oneoff = '{{ compose_oneoff }}'
  labels.compose_project = '{{ compose_project }}'
  labels.compose_project_working_dir = '{{ compose_project_working_dir }}'
  labels.compose_service = '{{ compose_service }}'

  ## container labels not useful for log filtering. info can be extracted from container_labels
  # labels.compose_config_hash = '{{ label."com.docker.compose.config-hash" }}'
  # labels.compose_project_config_files = '{{ label."com.docker.compose.project.config_files" }}'
  # labels.compose_version = '{{ label."com.docker.compose.version" }}'

  # labels.container_image_created = '{{ label."org.opencontainers.image.created" }}'
  # labels.container_image_revision = '{{ label."org.opencontainers.image.revision" }}'
  # labels.container_image_source = '{{ label."org.opencontainers.image.source" }}'
  # labels.container_image_url = '{{ label."org.opencontainers.image.url" }}'

  # remove_label_fields = true
{% endraw %}

{#- (jinja comment, won't appear )
# original event structure with encoding.codec = "json"
{
  "container_created_at": "2022-03-29T14:39:48.925912154Z",
  "container_id": "237a4235d3c97da8c2faeec8ea318b6689d363240f368bb9a1cee0d2e4e82beb",
  "container_name": "loki-canary_loki-canary_1",
  "host": "logserver1",
  "image": "grafana/loki-canary:2.4.2",
  "label": {
    "com.docker.compose.config-hash": "c32cc5fcd69a0dc9c632510fdb36096fbf7366df9e09f0d68c466decf5f91608",
    "com.docker.compose.container-number": "1",
    "com.docker.compose.oneoff": "False",
    "com.docker.compose.project": "loki-canary",
    "com.docker.compose.project.config_files": "docker-compose.yml",
    "com.docker.compose.project.working_dir": "/container/loki-canary",
    "com.docker.compose.service": "loki-canary",
    "com.docker.compose.version": "1.29.2",
    "org.opencontainers.image.created": "2022-01-12T16:55:53Z",
    "org.opencontainers.image.revision": "525040a3265715ca8cfb52cd39108ccfac9f8af6",
    "org.opencontainers.image.source": "https://github.com/grafana/loki.git",
    "org.opencontainers.image.url": "https://github.com/grafana/loki"
  },
  "message": "1648564959737014786 ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",
  "source_type": "docker",
  "stream": "stdout"
}

#}
